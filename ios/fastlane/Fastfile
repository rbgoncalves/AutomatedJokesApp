# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do |options|
    # Creates a temporary keychain
    if is_ci
      setup_ci
      get_appstore_api_key
    end  

    # Fetch and installs the certificates/profiles 
    match(type: "appstore")

    build_ipa options
    
    deploy_testflight

    release_on_github options if is_ci
  end
  
  desc 'Build ipa'
  private_lane :build_ipa do |options|
    is_releasable = analyze_commits(match: "*#{options[:env]}*")

    unless is_releasable
      UI.important  "No changes since last release"
    end

    last_build_number = latest_testflight_build_number(
      api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    )

    increment_build_number(build_number: last_build_number + 1)

    build_app(scheme: "AutomatedJokesApp", silent: true)
  end

  desc 'Deploy ipa to TestFlight'
  private_lane :deploy_testflight do
    # Generate Change Log
    notes = conventional_changelog(title: "Change Log", format: "plain")

    if is_ci 
      upload_to_testflight(
        api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
        skip_waiting_for_build_processing: true
      )
    else
      # Upload from local env, uses regural authentication
      upload_to_testflight

    end 
  end

  desc "Release on Github"
  private_lane :release_on_github do |options|
    lane_name = options[:env]

    # Generate Change Log
    notes = conventional_changelog(title: "Change Log")

    # Get Version and Build Number
    version_number = get_version_number
    build_number = get_build_number
 
    # Get head commit
    commit = last_git_commit
    hash = commit[:commit_hash]

    # Set Github Release
    name =  "[#{lane_name}] v#{version_number} Build: #{build_number}"

    set_github_release(
      repository_name: "rbgoncalves/AutomatedJokesApp",
      api_bearer: ENV["GITHUB_TOKEN"],
      name: name,
      commitish: hash,
      description: notes,
      tag_name: "v#{version_number}-#{lane_name}-#{build_number}",
      upload_assets: [lane_context[SharedValues::IPA_OUTPUT_PATH]]
    )
  end

  desc "Get AppStoreConnect API key"
  private_lane :get_appstore_api_key do
    # Gets API Key so 2FA is not needed
    # Value is injected into: SharedValues::APP_STORE_CONNECT_API_KEY
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content:  ENV["APPSTORE_KEY_CONTENT"],
      duration: 1200,
    )
  end
end